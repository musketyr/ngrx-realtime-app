plugins {
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "com.github.johnrengelman.shadow" version "4.0.2"
    id "jp.classmethod.aws.lambda" version "0.38"	
}

apply plugin:"application"
apply plugin:"groovy"

version "0.1"
group "eventbus"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

dependencyManagement {
    imports {
        mavenBom 'io.micronaut:micronaut-bom:1.0.3'
    }
}

dependencies {
    compile 'com.agorapulse:micronaut-aws-sdk:1.0.3.3'
    compile group: 'com.amazonaws', name: 'aws-lambda-java-events', version: '2.2.5'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-sns', version: '1.11.470'

    compile "io.micronaut.configuration:micronaut-redis-lettuce"

    compile "io.micronaut:micronaut-function-groovy"
    compile "io.micronaut:micronaut-runtime-groovy"
    compile "io.micronaut:micronaut-validation"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    runtime "ch.qos.logback:logback-classic:1.2.3"
    runtime "com.amazonaws:aws-lambda-java-log4j2:1.0.0"
    runtime "org.apache.logging.log4j:log4j-slf4j-impl:2.9.1"
    testCompile "io.micronaut:micronaut-function-client"
    testCompile "io.micronaut:micronaut-inject-groovy"
    testCompile("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testRuntime "io.micronaut:micronaut-http-server-netty"
    testRuntime "io.micronaut:micronaut-function-web"
}

shadowJar {
    mergeServiceFiles()
}

run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1')
shadowJar {
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
}
mainClassName = "lambda.eventbus.LambdaEchoFunction"
applicationDefaultJvmArgs = [""]

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

aws {
    region = 'eu-west-1'
}

if(new File("${System.getProperty("user.home")}/.aws/credentials").exists()) {
    task deploy(type: jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask, dependsOn: shadowJar) {
        functionName = "Echo"
        handler = "lambda.eventbus.EventbusFunction::lambdaEventbus"
        role = "arn:aws:iam::${aws.accountId}:role/lambda_ws_sns"
        runtime = com.amazonaws.services.lambda.model.Runtime.Java8
        zipFile = shadowJar.archivePath
        memorySize = 512
        timeout = 60
    }
}
tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
}
